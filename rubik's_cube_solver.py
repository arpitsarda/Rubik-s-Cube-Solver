# -*- coding: utf-8 -*-
"""Rubik's Cube Solver

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15dZbD2b0a-Jd5A5NZkIze0iWZvcDPtu3
"""

# Import necessary libraries
import numpy as np
import hashlib

# Define the Rubik's Cube class
class RubiksCube:
    def __init__(self):
        # Initialize the cube in a solved state using a 3D array
        self.cube = np.array([[[i for _ in range(3)] for _ in range(3)] for i in range(6)])

    def rotate_face(self, face):
        # Rotate a face of the cube clockwise
        self.cube[face] = np.rot90(self.cube[face], -1)

    def hash_cube(self):
        # Create a hash of the cube's current state
        return hashlib.md5(self.cube.tobytes()).hexdigest()

    def is_solved(self):
        # Check if the cube is solved
        return all(np.all(self.cube[i] == i) for i in range(6))

# Define the solver class
class CubeSolver:
    def __init__(self, cube):
        self.cube = cube
        self.visited = set()

    def solve(self, depth=8):
        # Start solving the cube with a depth-first search
        return self.dfs(self.cube, depth)

    def dfs(self, cube, depth):
        # Depth-first search to solve the cube
        if depth == 0:
            return cube.is_solved()

        cube_hash = cube.hash_cube()
        if cube_hash in self.visited:
            return False

        self.visited.add(cube_hash)

        for face in range(6):
            for _ in range(4):
                cube.rotate_face(face)
                if self.dfs(cube, depth - 1):
                    return True
                cube.rotate_face(face)  # Undo the rotation

        return False

# Main function to run the solver
if __name__ == "__main__":
    cube = RubiksCube()
    solver = CubeSolver(cube)
    if solver.solve():
        print("Cube solved!")
    else:
        print("Could not solve the cube within the given depth.")